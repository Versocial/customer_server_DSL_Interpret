PARSER_BEGIN(RowJsonParser)

package vlang.interpreter.parsers.rowJsonParser;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONObject;
import vlang.GlobalSetting;
import java.io.*;
import vlang.interpreter.Executor;import vlang.interpreter.Registry;

/**
* Parser.To convert the source file into an intermediate script that can be executed by the executor {@link Executor}.
*/
public class RowJsonParser{
    /**
    * error number
    */
    private  static int errorNum=0;
    /**
    * JSONObject presents the entry Step
    */
    private static final JSONObject entrySymbol=new JSONObject("{\"#\":0}");

    /**
    * parse
    * @param inPath path of the source file
    */
    public static JSONObject parse(String inPath)throws IOException {
        errorNum=0;
        GlobalSetting.init();
        RowJsonParser parser= new RowJsonParser(new InputStreamReader(new FileInputStream(inPath),StandardCharsets.UTF_8));
        JSONObject jsonObject = null;
        try {
             jsonObject = RowJsonParser.start();
             } catch (ParseException e) {
                   e.printStackTrace();
                   }
        if(errorNum>0){
            GlobalSetting.log.warning("Parse Fail : "+errorNum+" errors detected.");
            jsonObject=null;
        }
        else
            GlobalSetting.log.warning("Row Parse Success.");
        return jsonObject;
    }

}

PARSER_END(RowJsonParser)

SKIP:{
    " "
    | "\t"
    | "\n"
    | "\r"
    | "\r\n"
    | < "#" (~["\r", "\n"])* >
}

TOKEN:{
    <STEP :"Step">
    |<ENTRY:"@entry">
    |<FUNCTION: "Listen"|"Save"|"Exit"|"Manual"|"Speak">
    |<NUMBER:(["0"-"9"])+>
    |<IDENTIFIER: (["a"-"z", "A"-"Z"])+>
    |<STRING: "\"" (~["\""]|["\u4E00"-"\u9FA5"])* "\"">
    |<VAR: "$" (["a"-"z", "A"-"Z"])+>
}

JSONObject start() throws NumberFormatException:
{
    Token Step;
    JSONArray son;
    JSONObject ans=new JSONObject();

}
{

    (
            <STEP>
            Step=<IDENTIFIER>
            son= rStep()
            {
            if(ans.has(Step.image)){
                GlobalSetting.log.warning("Step "+Step.image+" has already defined.\n");
                errorNum++;
            }

            if(son.get(0).equals(entrySymbol)){
                son.remove(0);
                if(ans.has(Registry.entry)){
                GlobalSetting.log.warning("Entry has already defined as "+ans.getString(Registry.entry)+" but "+Step.image);
                errorNum++;
                }
                else
                   ans.put(Registry.entry,Step.image);
                }
            GlobalSetting.log.info("Finish parse Step "+Step.image);
            ans.put(Step.image,son);
            }
            ) *
        <EOF>
    {
    if(!ans.has(Registry.entry)){
                    GlobalSetting.log.warning("Entry is not defined");
                    errorNum++;
                }
    return ans;
    }
}

    /**
    * manage parse of Step
    */
JSONArray rStep():
{
    Token Func = null;
    JSONArray ans=new JSONArray();
    JSONObject son=new JSONObject();
    boolean canEnd=false;
    boolean canGoOn=true;
}
{
    (
        <ENTRY>
        {
        ans.put( entrySymbol);
        }
     )?
    (
        Func=<FUNCTION>
        son=rFunc(Func.image)
        {
        if(!canGoOn){
            GlobalSetting.log.warning("Unexpected another Function "+Func.image+" while step should finished.");
            errorNum++;
        }
        ans.put(son);
        canGoOn=Registry.func.get(Func.image).buildByJson(son).canBeNotEndFunction();
        canEnd= Registry.func.get(Func.image).buildByJson(son).canBeEndFunction();
        }

    )*
    {
    if(!canEnd){
        GlobalSetting.log.warning("Expected another Function while the step shouldn't finished just after function: "+Func.image);
                    errorNum++;
        }
    return ans;
    }
}
    /**
    * manage parse of Function
    */
JSONObject rFunc(String func):
{
    JSONObject ans;
    Token now=null;
     ArrayList<String> tokens=new ArrayList<String>();
}
{
         (
         ((now=<NUMBER>)|(now=<STRING>)|(now=<IDENTIFIER>)|(now=<VAR>))
         {tokens.add(now.image);
            }

         )*
       {
        ans=Registry.func.get(func).buildJson(tokens).put(Registry.function,func);
        return ans;
        }

}