/* Generated By:JavaCC: Do not edit this line. RowJsonParserTokenManager.java */
package vlang.interpreter.parsers.rowJsonParser;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;
import vlang.GlobalSetting;

import java.io.*;

import vlang.interpreter.Executor;
import vlang.interpreter.Registry;

/**
 * Token Manager.
 */
public class RowJsonParserTokenManager implements RowJsonParserConstants {

    /**
     * Debug output.
     */
    public static java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 11;
                    return 28;
                }
                return -1;
            case 1:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 11;
                    jjmatchedPos = 1;
                    return 19;
                }
                return -1;
            case 2:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 11;
                    jjmatchedPos = 2;
                    return 19;
                }
                return -1;
            case 3:
                if ((active0 & 0x80L) != 0L)
                    return 19;
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 13:
                jjmatchedKind = 4;
                return jjMoveStringLiteralDfa1_0(0x20L);
            case 64:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x80L);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 10:
                if ((active0 & 0x20L) != 0L)
                    return jjStopAtPos(1, 5);
                break;
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x100L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 112:
                if ((active0 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(3, 7, 19);
                break;
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x100L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 121:
                if ((active0 & 0x100L) != 0L)
                    return jjStopAtPos(5, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec1 = {
            0x0L, 0xffffffffffffc000L, 0x7fffffffL, 0x0L
    };
    static final long[] jjbitVec3 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
    };

    static private int jjMoveNfa_0(int startState, int curPos) {
        //int[] nextStates; // not used
        int startsAt = 0;
        jjnewStateCnt = 33;
        int i = 1;
        jjstateSet[0] = startState;
        //int j; // not used
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 10)
                                    kind = 10;
                                jjCheckNAdd(18);
                            } else if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 24;
                            else if (curChar == 34)
                                jjCheckNAddTwoStates(21, 22);
                            else if (curChar == 35) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(1);
                            }
                            break;
                        case 1:
                            if ((0xffffffffffffdbffL & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(1);
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 10)
                                kind = 10;
                            jjCheckNAdd(18);
                            break;
                        case 20:
                            if (curChar == 34)
                                jjCheckNAddTwoStates(21, 22);
                            break;
                        case 21:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(21, 22);
                            break;
                        case 22:
                            if (curChar == 34 && kind > 12)
                                kind = 12;
                            break;
                        case 23:
                            if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 28:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 11)
                                    kind = 11;
                                jjCheckNAdd(19);
                            }
                            if (curChar == 112)
                                jjstateSet[jjnewStateCnt++] = 31;
                            else if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 27;
                            break;
                        case 0:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 11)
                                    kind = 11;
                                jjCheckNAdd(19);
                            }
                            if (curChar == 83)
                                jjAddStates(0, 1);
                            else if (curChar == 77)
                                jjstateSet[jjnewStateCnt++] = 16;
                            else if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 10;
                            else if (curChar == 76)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 1:
                            if (kind > 6)
                                kind = 6;
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 2:
                            if (curChar == 110 && kind > 9)
                                kind = 9;
                            break;
                        case 3:
                            if (curChar == 101)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 4:
                            if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 5:
                            if (curChar == 115)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 6:
                            if (curChar == 105)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if (curChar == 76)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 8:
                            if (curChar == 116 && kind > 9)
                                kind = 9;
                            break;
                        case 9:
                            if (curChar == 105)
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 10:
                            if (curChar == 120)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 11:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 10;
                            break;
                        case 12:
                            if (curChar == 108 && kind > 9)
                                kind = 9;
                            break;
                        case 13:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 14:
                            if (curChar == 117)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 15:
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 14;
                            break;
                        case 16:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 17:
                            if (curChar == 77)
                                jjstateSet[jjnewStateCnt++] = 16;
                            break;
                        case 19:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAdd(19);
                            break;
                        case 21:
                            jjAddStates(2, 3);
                            break;
                        case 24:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjstateSet[jjnewStateCnt++] = 24;
                            break;
                        case 25:
                            if (curChar == 83)
                                jjAddStates(0, 1);
                            break;
                        case 26:
                            if (curChar == 101 && kind > 9)
                                kind = 9;
                            break;
                        case 27:
                            if (curChar == 118)
                                jjstateSet[jjnewStateCnt++] = 26;
                            break;
                        case 29:
                            if (curChar == 107 && kind > 9)
                                kind = 9;
                            break;
                        case 30:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 29;
                            break;
                        case 31:
                            if (curChar == 101)
                                jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        case 32:
                            if (curChar == 112)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 21:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                                jjAddStates(2, 3);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            28, 32, 21, 22,
    };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec0[i2] & l2) != 0L);
            default:
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec0[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec3[i2] & l2) != 0L);
            default:
                if ((jjbitVec1[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, null, "\123\164\145\160",
            "\100\145\156\164\162\171", null, null, null, null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final long[] jjtoToken = {
            0x3f81L,
    };
    static final long[] jjtoSkip = {
            0x7eL,
    };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[33];
    static private final int[] jjstateSet = new int[66];
    static protected char curChar;

    /**
     * Constructor.
     */
    public RowJsonParserTokenManager(SimpleCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public RowJsonParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 33; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        final Token t;
        final String tokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        tokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, tokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public static Token getNextToken() {
        //int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
